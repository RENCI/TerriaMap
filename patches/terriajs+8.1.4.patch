diff --git a/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js b/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js
index d05d7aa..5629418 100644
--- a/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js
+++ b/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js
@@ -20,6 +20,7 @@ import Box from "../../../Styled/Box";
 let DataCatalogTab = class DataCatalogTab extends React.Component {
     get searchPlaceholder() {
         const { t } = this.props;
+        console.log("t", t)
         return this.props.searchPlaceholder || t("addData.searchPlaceholder");
     }
     changeSearchText(newText) {
diff --git a/node_modules/terriajs/lib/.DS_Store b/node_modules/terriajs/lib/.DS_Store
new file mode 100644
index 0000000..c6bb39f
Binary files /dev/null and b/node_modules/terriajs/lib/.DS_Store differ
diff --git a/node_modules/terriajs/lib/Models/BaseMaps/defaultBaseMaps.ts b/node_modules/terriajs/lib/Models/BaseMaps/defaultBaseMaps.ts
index eff35fc..dbb8855 100644
--- a/node_modules/terriajs/lib/Models/BaseMaps/defaultBaseMaps.ts
+++ b/node_modules/terriajs/lib/Models/BaseMaps/defaultBaseMaps.ts
@@ -39,27 +39,30 @@ export function defaultBaseMaps(terria: Terria): any[] {
       image: "build/TerriaJS/images/bing-maps-roads.png"
     });
   } else if (terria.configParameters.useCesiumIonBingImagery === true) {
-    baseMaps.push({
-      item: {
-        id: "basemap-bing-aerial-with-labels",
-        name: "Bing Maps Aerial with Labels",
-        type: "ion-imagery",
-        ionAssetId: 3,
-        opacity: 1.0
-      },
-      image: "build/TerriaJS/images/bing-aerial-labels.png"
-    });
+    // TODO: (AM) Hiding this option since we do not currently have a US map for this
+    // baseMaps.push({
+    //   item: {
+    //     id: "basemap-bing-aerial-with-labels",
+    //     name: "Bing Maps Aerial with Labels",
+    //     type: "ion-imagery",
+    //     ionAssetId: 3,
+    //     opacity: 1.0
+    //   },
+    //   image: "build/TerriaJS/images/bing-aerial-labels.png"
+    // });
+
+    // TODO: (AM) Hiding this option since we do not currently have a US map for this
+    // baseMaps.push({
+    //   item: {
+    //     id: "basemap-bing-aerial",
+    //     name: "Bing Maps Aerial",
+    //     type: "ion-imagery",
+    //     ionAssetId: 2,
+    //     opacity: 1.0
+    //   },
+    //   image: "build/TerriaJS/images/bing-aerial.png"
+    // });
 
-    baseMaps.push({
-      item: {
-        id: "basemap-bing-aerial",
-        name: "Bing Maps Aerial",
-        type: "ion-imagery",
-        ionAssetId: 2,
-        opacity: 1.0
-      },
-      image: "build/TerriaJS/images/bing-aerial.png"
-    });
     baseMaps.push({
       item: {
         id: "basemap-bing-roads",
diff --git a/node_modules/terriajs/lib/Models/SearchProviders/CatalogSearchProvider.ts b/node_modules/terriajs/lib/Models/SearchProviders/CatalogSearchProvider.ts
index da2317f..ae3e798 100644
--- a/node_modules/terriajs/lib/Models/SearchProviders/CatalogSearchProvider.ts
+++ b/node_modules/terriajs/lib/Models/SearchProviders/CatalogSearchProvider.ts
@@ -16,14 +16,20 @@ interface CatalogSearchProviderOptions {
   terria: Terria;
 }
 
+// import saveModelToJson from "../Definition/saveModelToJson"
+
 type UniqueIdString = string;
 type ResultMap = Map<UniqueIdString, boolean>;
 export function loadAndSearchCatalogRecursively(
   models: BaseModel[],
-  searchTextLowercase: string,
+  // ALM - 6/10/22 COMMENTED OUT TO REMOVE CASE SENSITIVE SEARCH
+  // searchTextLowercase: string,
+  searchText: string,
   searchResults: SearchProviderResults,
   resultMap: ResultMap,
-  iteration: number = 0
+  iteration: number = 0,
+  // added to allow Search By Type and Search By Day
+  searchBy: string = "default"
 ): Promise<void> {
   // checkTerriaAgainstResults(terria, searchResults)
   // don't go further than 10 deep, but also if we have references that never
@@ -31,32 +37,64 @@ export function loadAndSearchCatalogRecursively(
   if (iteration > 10) {
     return Promise.resolve();
   }
+
   // add some public interface for terria's `models`?
   const referencesAndGroupsToLoad: any[] = models.filter((model: any) => {
+    
     if (resultMap.get(model.uniqueId) === undefined) {
       const modelToSave = model.target || model;
       // Use a flattened string of definition data later,
       // without only checking name/id/descriptions?
       // saveModelToJson(modelToSave, {
-      //   includeStrata: [CommonStrata.definition]
-      // });
-      autorun(reaction => {
-        const searchString = `${modelToSave.name} ${modelToSave.uniqueId} ${modelToSave.description}`;
-        const matchesString =
-          searchString.toLowerCase().indexOf(searchTextLowercase) !== -1;
-        resultMap.set(model.uniqueId, matchesString);
-        if (matchesString) {
-          runInAction(() => {
-            searchResults.results.push(
-              new SearchResult({
-                name: name,
-                catalogItem: modelToSave
-              })
-            );
-          });
-        }
-        reaction.dispose();
-      });
+        //   includeStrata: [CommonStrata.definition]
+        // });
+        
+        // const modelToSaveJson = saveModelToJson(modelToSave);
+        autorun(reaction => {
+          // const searchString = `${modelToSave.name} ${modelToSave.uniqueId} ${modelToSave.description}`;
+          let searchString = "";
+          
+          switch(searchBy) {
+            case "date": {
+              searchString = `${modelToSave.info[0]?.content}`;
+              break;
+            }
+            case "event": {
+              searchString = `${modelToSave.info[1]?.content}`;
+              break;
+            }
+            case "grid": {
+              searchString = `${modelToSave.info[2]?.content}`;
+              break;
+            }
+            case "instance": {
+              searchString = `${modelToSave.info[3]?.content}`;
+              break;
+            }
+            default: {
+              searchString = `${modelToSave.name} ${modelToSave.uniqueId} ${modelToSave.description}`;
+              break;
+            }
+          }
+
+          // ALM - 6/10/22 COMMENTED OUT TO REMOVE CASE SENSITIVE SEARCH
+          // const matchesString =
+          //   searchString.toLowerCase().indexOf(searchTextLowercase) !== -1;
+          const matchesString =
+            searchString.indexOf(searchText) !== -1;
+          resultMap.set(model.uniqueId, matchesString);
+          if (matchesString) {
+            runInAction(() => {
+              searchResults.results.push(
+                new SearchResult({
+                  name: modelToSave.name,
+                  catalogItem: modelToSave
+                })
+              );
+            });
+          }
+          reaction.dispose();
+        });
     }
 
     if (ReferenceMixin.isMixedInto(model) || GroupMixin.isMixedInto(model)) {
@@ -90,10 +128,13 @@ export function loadAndSearchCatalogRecursively(
         resolve(
           loadAndSearchCatalogRecursively(
             models,
-            searchTextLowercase,
+            // ALM - 6/10/22 COMMENTED OUT TO REMOVE CASE SENSITIVE SEARCH
+            // searchTextLowercase,
+            searchText,
             searchResults,
             resultMap,
-            iteration + 1
+            iteration + 1,
+            searchBy
           )
         );
       });
@@ -120,12 +161,14 @@ export default class CatalogSearchProvider extends SearchProvider {
 
   protected async doSearch(
     searchText: string,
-    searchResults: SearchProviderResults
+    searchResults: SearchProviderResults,
+    searchBy?: string
   ): Promise<void> {
     this.isSearching = true;
     searchResults.results.length = 0;
     searchResults.message = undefined;
 
+    // Cancel if no search criteria provided
     if (searchText === undefined || /^\s*$/.test(searchText)) {    
       this.isSearching = false;
       return Promise.resolve();
@@ -143,11 +186,15 @@ export default class CatalogSearchProvider extends SearchProvider {
         const results = await this.terria.catalogIndex?.search(searchText);
         runInAction(() => (searchResults.results = results));
       } else {
+        let defaultIteration = 0;
         await loadAndSearchCatalogRecursively(
           this.terria.modelValues,
-          searchText.toLowerCase(),
+          // searchText.toLower Case(),
+          searchText,
           searchResults,
-          resultMap
+          resultMap,
+          defaultIteration,
+          searchBy
         );
       }
 
diff --git a/node_modules/terriajs/lib/Models/SearchProviders/SearchProvider.ts b/node_modules/terriajs/lib/Models/SearchProviders/SearchProvider.ts
index 6e88323..87d8cb1 100644
--- a/node_modules/terriajs/lib/Models/SearchProviders/SearchProvider.ts
+++ b/node_modules/terriajs/lib/Models/SearchProviders/SearchProvider.ts
@@ -17,16 +17,17 @@ export default abstract class SearchProvider {
   }
 
   @action
-  search(searchText: string): SearchProviderResults {
+  search(searchText: string, searchBy?: string): SearchProviderResults {
     const result = new SearchProviderResults(this);
     result.resultsCompletePromise = fromPromise(
-      this.doSearch(searchText, result)
+      this.doSearch(searchText, result, searchBy)
     );
     return result;
   }
 
   protected abstract doSearch(
     searchText: string,
-    results: SearchProviderResults
+    results: SearchProviderResults,
+    searchBy?: string
   ): Promise<void>;
 }
diff --git a/node_modules/terriajs/lib/ReactViewModels/SearchState.ts b/node_modules/terriajs/lib/ReactViewModels/SearchState.ts
index 909e486..d921534 100644
--- a/node_modules/terriajs/lib/ReactViewModels/SearchState.ts
+++ b/node_modules/terriajs/lib/ReactViewModels/SearchState.ts
@@ -100,16 +100,36 @@ export default class SearchState {
     ]);
   }
 
+  // @action
+  // searchCatalog() {
+  //   if (this.isWaitingToStartCatalogSearch) {
+  //     this.isWaitingToStartCatalogSearch = false;
+  //     if (this.catalogSearchResults) {
+  //       this.catalogSearchResults.isCanceled = true;
+  //     }
+  //     if (this.catalogSearchProvider) {
+  //       this.catalogSearchResults = this.catalogSearchProvider.search(
+  //         this.catalogSearchText
+  //       );
+  //     }
+  //   }
+  // }
+
   @action
-  searchCatalog() {
+  searchCatalog(searchBy?: string) {
+    // if searchBy is undefined set it to default
+    searchBy = searchBy !== undefined ? searchBy : "default";
     if (this.isWaitingToStartCatalogSearch) {
       this.isWaitingToStartCatalogSearch = false;
       if (this.catalogSearchResults) {
         this.catalogSearchResults.isCanceled = true;
       }
+     // console.log("SearchState.searchCatalog", this.catalogSearchProvider);
       if (this.catalogSearchProvider) {
+        // this is causing the error right now. search can't be called directly from catalogSearchProvider
         this.catalogSearchResults = this.catalogSearchProvider.search(
-          this.catalogSearchText
+          this.catalogSearchText,
+          searchBy
         );
       }
     }
diff --git a/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs.jsx b/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs.jsx
index 77453ae..ad00084 100644
--- a/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs.jsx
+++ b/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs.jsx
@@ -81,7 +81,9 @@ const Tabs = observer(
       } else {
         return [
           {
-            name: t("addData.dataCatalogue"),
+            // Changed line below to set button name to "Data Catalog" vs "Data Catalogue"
+            // name: t("addData.dataCatalogue"),
+            name: this.props.viewState.dataCatalogButtonTitle,
             title: "data-catalog",
             category: "data-catalog",
             panel: (
diff --git a/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.jsx b/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.jsx
index 0428fb4..9207b4f 100644
--- a/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.jsx
+++ b/node_modules/terriajs/lib/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.jsx
@@ -28,7 +28,9 @@ class DataCatalogTab extends React.Component {
   @computed
   get searchPlaceholder() {
     const { t } = this.props;
-    return this.props.searchPlaceholder || t("addData.searchPlaceholder");
+    // Changed line below to change "Search the catalogue" to "Search the catalog"
+    // return this.props.searchPlaceholder || t("addData.searchPlaceholder");
+    return this.props.viewState.searchPlaceholder
   }
 
   changeSearchText(newText) {
diff --git a/node_modules/terriajs/lib/ReactViews/FeatureInfo/feature-info-section.scss b/node_modules/terriajs/lib/ReactViews/FeatureInfo/feature-info-section.scss
index 51321a1..2050a9e 100644
--- a/node_modules/terriajs/lib/ReactViews/FeatureInfo/feature-info-section.scss
+++ b/node_modules/terriajs/lib/ReactViews/FeatureInfo/feature-info-section.scss
@@ -58,6 +58,16 @@
     padding: 5px;
   }
 
+  a {
+    text-decoration: underline !important;
+    font-weight: bold;
+    color: rgba($color: #a2b8c8, $alpha: 1.0) !important;
+  }
+
+  a:hover {
+    color: white !important;
+  }
+
   tr:nth-child(odd) {
     @if variable-exists(feature-info-table-odd-row-bg) {
       background-color: $feature-info-table-odd-row-bg;
diff --git a/node_modules/terriajs/lib/ReactViews/Map/Panels/APSViz.jsx b/node_modules/terriajs/lib/ReactViews/Map/Panels/APSViz.jsx
new file mode 100644
index 0000000..f5a76d7
--- /dev/null
+++ b/node_modules/terriajs/lib/ReactViews/Map/Panels/APSViz.jsx
@@ -0,0 +1,112 @@
+"use strict";
+
+// proptypes are in mixin
+/* eslint react/prop-types:0*/
+
+import React from "react";
+import createReactClass from "create-react-class";
+import classNames from "classnames";
+import Icon from "../../../Styled/Icon";
+import InnerPanel from "./InnerPanel";
+import BaseOuterPanel from "./BaseOuterPanel";
+
+import Styles from "./panel.scss";
+
+import defined from "terriajs-cesium/Source/Core/defined";
+
+const DropdownPanel = createReactClass({
+  displayName: "DropdownPanel",
+  mixins: [BaseOuterPanel],
+
+  getInitialState() {
+    return {
+      localIsOpen: false,
+      caretOffset: undefined,
+      dropdownOffset: undefined
+    };
+  },
+
+  onInnerMounted(innerElement) {
+    const centerInnerDropdown = this.props.showDropdownInCenter;
+    if (centerInnerDropdown) {
+      this.setState({
+        caretOffset: "50%",
+        dropdownOffset: "50%"
+      });
+    } else if (innerElement) {
+      const btnRef = this.props.btnRef;
+      const buttonElementOffsetLeft =
+        btnRef?.current?.offsetLeft || this.buttonElement?.offsetLeft || 0;
+      const buttonElementClientWidth =
+        btnRef?.current?.clientWidth || this.buttonElement?.clientWidth || 0;
+      // how much further right the panel is from the button
+      const offset = buttonElementOffsetLeft - innerElement.offsetLeft;
+      // if the panel is left of the button leave its offset as is, otherwise move it right so it's level with the button.
+      const dropdownOffset =
+        offset < innerElement.offsetLeft ? offset : innerElement.offsetLeft;
+      // offset the caret to line up with the middle of the button - note that the caret offset is relative to the panel, whereas
+      // the offsets for the button/panel are relative to their container.
+      const caretOffset = Math.max(
+        buttonElementClientWidth / 2 -
+          10 -
+          (dropdownOffset - buttonElementOffsetLeft),
+        0
+      );
+
+      this.setState({
+        caretOffset: caretOffset >= 0 && caretOffset + "px",
+        dropdownOffset: dropdownOffset + "px"
+      });
+    } else {
+      this.setState({
+        caretOffset: undefined,
+        dropdownOffset: undefined
+      });
+    }
+  },
+
+  /* eslint-disable-next-line camelcase */
+  UNSAFE_componentWillReceiveProps(nextProps) {
+    if (nextProps.forceClosed) {
+      this.onDismissed();
+    }
+  },
+
+  openWithUserClick(e) {
+    if (this.props.userOnClick) {
+      this.props.userOnClick();
+    }
+    this.openPanel(e);
+  },
+
+  render() {
+    let iconGlyph;
+    if (defined(Icon.GLYPHS[this.props.theme.icon])) {
+      iconGlyph = Icon.GLYPHS[this.props.theme.icon];
+    } else {
+      iconGlyph = this.props.theme.icon;
+    }
+
+    return (
+      <div className={classNames(Styles.panel, this.props.theme.outer)}>
+        <button
+          onClick={this.openWithUserClick}
+          type="button"
+          className={classNames(Styles.button, this.props.theme.btn, {
+            [Styles.buttonForModalDropdown]: this.props.showDropdownAsModal
+          })}
+          title={this.props.btnTitle}
+          ref={this.props.btnRef || (element => (this.buttonElement = element))}
+          isOpen={this.isOpen()}
+        >
+          <If condition={this.props.theme.icon}>
+            <Icon glyph={iconGlyph} />
+          </If>
+            {this.props.children}
+        </button>
+      </div>
+    );
+  }
+});
+
+export default DropdownPanel;
diff --git a/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/MenuPanel.jsx b/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/MenuPanel.jsx
index 178c812..448bbb2 100644
--- a/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/MenuPanel.jsx
+++ b/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/MenuPanel.jsx
@@ -1,10 +1,11 @@
 import DropdownPanel from "../../Map/Panels/DropdownPanel";
 import MobilePanel from "../../Map/Panels/MobilePanel";
+import APZVizPanel from "../../Map/Panels/APSViz"
 import withControlledVisibility from "../../HOCs/withControlledVisibility";
 import responsiveSwitch from "./ResponsiveSwitch";
 
 const MenuPanel = withControlledVisibility(
-  responsiveSwitch(DropdownPanel, MobilePanel)
+  responsiveSwitch(DropdownPanel, MobilePanel, APZVizPanel)
 );
 
 export default MenuPanel;
diff --git a/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/ResponsiveSwitch.jsx b/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/ResponsiveSwitch.jsx
index 0952345..a4f38a0 100644
--- a/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/ResponsiveSwitch.jsx
+++ b/node_modules/terriajs/lib/ReactViews/StandardUserInterface/customizable/ResponsiveSwitch.jsx
@@ -6,11 +6,17 @@ import PropTypes from "prop-types";
  * Higher-order component that either shows a one element or the other, depending on whether the "smallScreen" prop
  * passed to it is true or false.
  */
-export default (LargeScreenComponent, SmallScreenComponent) => {
+// export default (LargeScreenComponent, SmallScreenComponent) => {
+export default (LargeScreenComponent, SmallScreenComponent, APSVizScreenComponent) => {
   // eslint-disable-next-line require-jsdoc
   function ResponsiveSwitch(props) {
+    const { smallScreen, useDropdownInMenu } = props
     return (
       <Choose>
+        {/* ALM - Added APSVizScreenComponent to allow drop down directly in button instead of separate drop down panel */}
+        <When condition={!smallScreen && useDropdownInMenu}>
+          <APSVizScreenComponent {...props} />
+        </When>        
         <When condition={props.smallScreen}>
           <SmallScreenComponent {...props} />
         </When>
