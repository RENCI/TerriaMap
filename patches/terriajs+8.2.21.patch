diff --git a/node_modules/terriajs/lib/.DS_Store b/node_modules/terriajs/lib/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts b/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts
index ae4ce1e..d3c488d 100644
--- a/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts
+++ b/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts
@@ -61,15 +61,19 @@ export function featureBelongsToCatalogItem(
   feature: TerriaFeature,
   catalogItem: BaseModel
 ) {
+
   if (feature._catalogItem === catalogItem) return true;
 
-  if (!MappableMixin.isMixedInto(catalogItem)) return;
+  if (!MappableMixin.isMixedInto(catalogItem)) {
+    return;
+  } 
 
   const dataSource = feature.entityCollection?.owner;
   const imageryProvider = feature.imageryLayer?.imageryProvider;
 
   // Test whether the catalog item has a matching dataSource or an imageryProvider
   const match = catalogItem.mapItems.some((mapItem) => {
+    
     if (dataSource && mapItem === dataSource) {
       return true;
     }
@@ -82,6 +86,5 @@ export function featureBelongsToCatalogItem(
     }
     return false;
   });
-
   return match;
 }
diff --git a/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts b/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts
index 9e1c801..c8873b8 100644
--- a/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts
+++ b/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts
@@ -103,7 +103,6 @@ function getEsriFeature(
   geometryType: esriGeometryType
 ): GeoJsonFeature | undefined {
   let geojsonGeom: GeoJsonGeometry | undefined;
-
   if (!featureData?.geometry) return undefined;
 
   if (geometryType === "esriGeometryPolygon") {
@@ -205,7 +204,6 @@ function esriSpatialReferenceToCrs(
   spatialReference: SpatialReference | undefined
 ): GeoJsonCrs | undefined {
   let code: number | string | undefined;
-
   if (spatialReference) {
     if ("wkt" in spatialReference && spatialReference.wkt) {
       code = spatialReference.wkt;
diff --git a/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts b/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts
index 5c557f5..51fbbcb 100644
--- a/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts
+++ b/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts
@@ -218,6 +218,8 @@ interface FeatureCounts {
 }
 
 function GeoJsonMixin<T extends Constructor<Model<GeoJsonTraits>>>(Base: T) {
+  
+  
   abstract class GeoJsonMixin extends TableMixin(
     FeatureInfoUrlTemplateMixin(UrlMixin(CatalogMemberMixin(Base)))
   ) {
@@ -408,6 +410,7 @@ function GeoJsonMixin<T extends Constructor<Model<GeoJsonTraits>>>(Base: T) {
       if (pickResult instanceof Entity) {
         return TerriaFeature.fromEntityCollectionOrEntity(pickResult);
       } else if (isDefined(pickResult?.id)) {
+        
         return TerriaFeature.fromEntityCollectionOrEntity(pickResult.id);
       }
     }
@@ -1051,9 +1054,13 @@ function GeoJsonMixin<T extends Constructor<Model<GeoJsonTraits>>>(Base: T) {
         }
 
         // Billboard
-        if (isDefined(entity.billboard) && isDefined(styles.markerUrl)) {
+        if (isDefined(entity.billboard) && 
++            (!properties ||
++             !isDefined(properties["marker-url"])) ||
++             !isDefined(styles.markerUrl)) {
           entity.billboard = new BillboardGraphics({
-            image: new ConstantProperty(styles.markerUrl),
+            // image: new ConstantProperty(styles.markerUrl),
+            image: new ConstantProperty(properties?.["marker-url"]?.getValue() ?? styles.markerUrl),
             width:
               properties && properties["marker-width"]
                 ? new ConstantProperty(properties["marker-width"])
diff --git a/node_modules/terriajs/lib/Models/Leaflet.ts b/node_modules/terriajs/lib/Models/Leaflet.ts
index d8f0f0b..25ebd57 100644
--- a/node_modules/terriajs/lib/Models/Leaflet.ts
+++ b/node_modules/terriajs/lib/Models/Leaflet.ts
@@ -289,7 +289,6 @@ export default class Leaflet extends GlobeOrMap {
    */
   private pickLocation(e: L.LeafletEvent) {
     const mouseEvent = <L.LeafletMouseEvent>e;
-
     // Handle click events that cross the anti-meridian
     if (mouseEvent.latlng.lng > 180 || mouseEvent.latlng.lng < -180) {
       mouseEvent.latlng = mouseEvent.latlng.wrap();
diff --git a/node_modules/terriajs/lib/Models/Terria.ts b/node_modules/terriajs/lib/Models/Terria.ts
index f465a0d..cf5ba9c 100644
--- a/node_modules/terriajs/lib/Models/Terria.ts
+++ b/node_modules/terriajs/lib/Models/Terria.ts
@@ -1701,6 +1701,7 @@ export default class Terria {
     // Set the new contents of the workbench.
     const newItemsRaw = filterOutUndefined(
       workbench.map((modelId) => {
+        
         if (typeof modelId !== "string") {
           errors.push(
             new TerriaError({
diff --git a/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx b/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx
index f33bf94..26994c6 100644
--- a/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx
+++ b/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx
@@ -2,7 +2,7 @@ import classNames from "classnames";
 import { TFunction } from "i18next";
 import { action, observable, runInAction } from "mobx";
 import { observer } from "mobx-react";
-import React from "react";
+import React, { useEffect } from "react";
 import { WithTranslation, withTranslation } from "react-i18next";
 import filterOutUndefined from "../../../Core/filterOutUndefined";
 import ChartableMixin from "../../../ModelMixins/ChartableMixin";
@@ -11,9 +11,11 @@ import Terria from "../../../Models/Terria";
 import Icon from "../../../Styled/Icon";
 import UrlTraits from "../../../Traits/TraitsClasses/UrlTraits";
 import Styles from "./chart-expand-and-download-buttons.scss";
-
+import ChartView from "terriajs/lib/Charts/ChartView";
+import { useLayout } from "../../../../../../lib/custom-ui/components/layout";
+import { useLayers } from "../../../../../../lib/custom-ui/context";
+import { useViewState } from "terriajs/lib/ReactViews/StandardUserInterface/ViewStateContext";
 const Dropdown = require("../../Generic/Dropdown");
-
 interface PropsType extends WithTranslation {
   terria: Terria;
   sourceItems: Promise<ChartableMixin.Instance | undefined>[]; // Array of items or Promise returning item
@@ -24,21 +26,17 @@ interface PropsType extends WithTranslation {
   raiseToTitle: boolean;
   t: TFunction;
 }
-
 @observer
 class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
   @observable sourceItems: ChartableMixin.Instance[] = [];
-
   @action.bound
   private expandButton() {
     this.expandItem(this.sourceItems.length - 1);
   }
-
   @action.bound
   private expandDropdown(_selected: unknown, sourceIndex: number) {
     this.expandItem(sourceIndex);
   }
-
   /**
    * Expand sourceIndex item by adding it to the workbench.
    *
@@ -47,7 +45,6 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
    */
   private expandItem(sourceIndex: number) {
     const terria = this.props.terria;
-
     runInAction(async () => {
       const sourceItems = this.sourceItems;
       const itemToExpand = sourceItems[sourceIndex];
@@ -55,7 +52,6 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
       if (!itemToExpand) {
         return;
       }
-
       // We want to show only one source item at a time, so remove any
       // existing source items from the workbench
       sourceItems.forEach((sourceItem) => {
@@ -65,14 +61,35 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
           }
         });
       });
-
       try {
+        
+        // let csvLayers = this.props.terria.workbench.items.map((layer: any) => {
+        //   if (layer.type === "csv") {
+        //     return layer;
+        //   }
+        // });
+        // csvLayers.forEach((layer: any, i) => {
+        //   if (i > 0) {
+        //     this.props.terria.workbench.remove(layer);
+        //   }
+        // })
         terria.addModel(itemToExpand);
-      } catch {}
+      } catch { }
       (await workbench.add(itemToExpand)).raiseError(terria, undefined, true);
+      workbench.items.map((layer) => {
+        type Wbench = {
+          [key: string]: any; // :point_left:️ variable key
+        };
+        const obj: Wbench = {};
+        obj.layer = layer;
+        if (obj.layer.chartItems && obj.layer.chartItems.length > 0) {
+          obj.layer.chartItems.map((item: { updateIsSelectedInWorkbench: (a: boolean) => void }) => {
+            item.updateIsSelectedInWorkbench(true);
+          });
+        }
+      });
     });
   }
-
   resolveSourceItems() {
     Promise.all(
       this.props.sourceItems.map((sourceItem) => Promise.resolve(sourceItem))
@@ -82,30 +99,25 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
       })
     );
   }
-
   componentDidMount() {
     this.resolveSourceItems();
   }
-
   componentDidUpdate(prevProps: PropsType) {
     if (this.props.sourceItems !== prevProps.sourceItems) {
       this.resolveSourceItems();
     }
   }
-
   render() {
     if (this.sourceItems.length === 0) {
       return null;
     }
-
     // The downloads and download names default to the sources and source names if not defined.
     let downloads: string[] = filterOutUndefined(
       this.props.downloads ||
-        this.sourceItems.map((item) =>
-          hasTraits(item, UrlTraits, "url") ? item.url : undefined
-        )
+      this.sourceItems.map((item) =>
+        hasTraits(item, UrlTraits, "url") ? item.url : undefined
+      )
     );
-
     const { sourceNames, canDownload, raiseToTitle, t } = this.props;
     if (sourceNames && sourceNames.length > 0) {
       const downloadNames = this.props.downloadNames || sourceNames;
@@ -123,7 +135,6 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
         />
       );
     }
-
     return (
       <ExpandAndDownloadButtons
         onExpand={this.expandButton}
@@ -135,7 +146,6 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
     );
   }
 }
-
 const ExpandAndDownloadDropdowns = function (props: {
   sourceNames: string[];
   canDownload: boolean;
@@ -150,12 +160,10 @@ const ExpandAndDownloadDropdowns = function (props: {
     button: Styles.dropdownBtn,
     btnOption: Styles.dropdownBtnOption
   };
-
   const downloadDropdownTheme = {
     ...expandDropdownTheme,
     button: classNames(Styles.btnSmall, Styles.btnDownload)
   };
-
   return (
     <div
       className={classNames(Styles.chartExpand, {
@@ -179,12 +187,56 @@ const ExpandAndDownloadDropdowns = function (props: {
     </div>
   );
 };
-
 const ExpandAndDownloadButtons = function (props: {
   onExpand: () => void;
   downloadUrl?: string;
   t: TFunction;
 }) {
+  const { drawerIsOpen, openDrawer }: any = useLayout();
+  const viewState = useViewState();
+  const { activatedLayer,
+    currentTabIndex,
+    setActivatedLayer,
+    setCurrentTabIndex,
+    setChartItems }: any = useLayers();
+
+  useEffect(() => {
+    if (drawerIsOpen == false) {
+      openDrawer()
+    }
+    if (currentTabIndex == 0) {
+      //setCurrentTabIndex(2)
+      setTimeout(function afterTwoSeconds() {
+        setCurrentTabIndex(1)
+      }, 400)
+      const csvType: any = viewState.terria.workbench.items.find((element) => element.type == "csv");
+      const chartView = new ChartView(viewState.terria);
+      const chartItems = chartView.chartItems;
+      setChartItems(chartItems)
+      setActivatedLayer(csvType)
+    } else {
+      // let csvLayers = viewState.terria.workbench.items.map((layer) => {
+      //   if (layer.type === "csv") {
+      //     return layer;
+      //   }
+      // });
+      // csvLayers.forEach((layer: any, i) => {
+      //   if (i > 0) {
+      //     viewState.terria.workbench.remove(layer);
+      //   }
+      // });
+      //setCurrentTabIndex(0)
+      setTimeout(function afterTwoSeconds() {
+        setCurrentTabIndex(1)
+      }, 400)
+      const csvType: any = viewState.terria.workbench.items.find((element) => element.type == "csv");
+      const chartView = new ChartView(viewState.terria);
+      const chartItems = chartView.chartItems;
+      setChartItems(chartItems)
+      setActivatedLayer(csvType)
+    }
+  }, []);
+  props.onExpand()
   return (
     <div className={Styles.chartExpand}>
       <button
@@ -206,5 +258,4 @@ const ExpandAndDownloadButtons = function (props: {
     </div>
   );
 };
-
 export default withTranslation()(ChartExpandAndDownloadButtons);
diff --git a/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx b/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx
index 025fd72..8cd3835 100644
--- a/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx
+++ b/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx
@@ -30,6 +30,7 @@ export const ChartItem: React.FC<IChartItem> = observer(
 
     const toggleActive = () => {
       const catalogItem = chartItem.item;
+      console.log(chartItem.item)
       runInAction(() => {
         const shouldSelect = !chartItem.isSelectedInWorkbench;
         chartItem.updateIsSelectedInWorkbench(shouldSelect);
diff --git a/node_modules/terriajs/tsconfig.json b/node_modules/terriajs/tsconfig.json
index fe75b54..7a02bd7 100644
--- a/node_modules/terriajs/tsconfig.json
+++ b/node_modules/terriajs/tsconfig.json
@@ -7,6 +7,7 @@
     "sourceMap": true,
     "strict": true,
     "allowJs": true,
+    "checkJs": false,
     "jsx": "preserve",
     "esModuleInterop": true,
     "allowSyntheticDefaultImports": true,
