diff --git a/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js b/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js
index c5cf44a..fbcb1d1 100644
--- a/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js
+++ b/node_modules/terriajs/dist/ReactViews/ExplorerWindow/Tabs/DataCatalogTab.js
@@ -20,6 +20,7 @@ import Box from "../../../Styled/Box";
 let DataCatalogTab = class DataCatalogTab extends React.Component {
     get searchPlaceholder() {
         const { t } = this.props;
+        console.log("t", t)
         return this.props.searchPlaceholder || t("addData.searchPlaceholder");
     }
     changeSearchText(newText) {
diff --git a/node_modules/terriajs/lib/.DS_Store b/node_modules/terriajs/lib/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts b/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts
index ae4ce1e..2af1f84 100644
--- a/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts
+++ b/node_modules/terriajs/lib/Map/PickedFeatures/PickedFeatures.ts
@@ -61,15 +61,19 @@ export function featureBelongsToCatalogItem(
   feature: TerriaFeature,
   catalogItem: BaseModel
 ) {
+
   if (feature._catalogItem === catalogItem) return true;
 
-  if (!MappableMixin.isMixedInto(catalogItem)) return;
+  if (!MappableMixin.isMixedInto(catalogItem)) {
+    return;
+  } 
 
   const dataSource = feature.entityCollection?.owner;
   const imageryProvider = feature.imageryLayer?.imageryProvider;
 
   // Test whether the catalog item has a matching dataSource or an imageryProvider
   const match = catalogItem.mapItems.some((mapItem) => {
+    
     if (dataSource && mapItem === dataSource) {
       return true;
     }
@@ -82,6 +86,6 @@ export function featureBelongsToCatalogItem(
     }
     return false;
   });
-
+  // console.log(match)
   return match;
 }
diff --git a/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts b/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts
index 9e1c801..d6c43ce 100644
--- a/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts
+++ b/node_modules/terriajs/lib/Map/PickedFeatures/featureDataToGeoJson.ts
@@ -40,6 +40,7 @@ const pointInPolygon = require("point-in-polygon");
 export default function featureDataToGeoJson(
   featureData: unknown
 ): FeatureCollectionWithCrs | undefined {
+  console.log("featureDataToGeoJson");
   if (!isJsonValue(featureData)) {
     return undefined;
   }
@@ -66,10 +67,13 @@ featureDataToGeoJson.supportedFormats = [
 ];
 
 function convertGeoJson(featureData: JsonValue) {
+  console.log("convert");
   return toFeatureCollection(featureData);
 }
 
 function convertEsri(featureData: JsonValue) {
+  console.log("convertesri");
+  console.log(featureData)
   if (
     (isEsriFeatureSet(featureData) || isEsriFeature(featureData)) &&
     hasEsriGeometryType(featureData)
@@ -81,6 +85,7 @@ function getEsriGeometry(
   featureData: FeatureSet | ArcGisFeature,
   geometryType: esriGeometryType
 ): FeatureCollectionWithCrs | undefined {
+  console.log("geometry");
   const crs = esriSpatialReferenceToCrs(
     "geometry" in featureData
       ? featureData.geometry.spatialReference
@@ -103,7 +108,7 @@ function getEsriFeature(
   geometryType: esriGeometryType
 ): GeoJsonFeature | undefined {
   let geojsonGeom: GeoJsonGeometry | undefined;
-
+  console.log("esri");
   if (!featureData?.geometry) return undefined;
 
   if (geometryType === "esriGeometryPolygon") {
@@ -168,6 +173,7 @@ function getEsriFeature(
       };
     }
   } else if (geometryType === "esriGeometryPoint") {
+    console.log("esriGeometryPoint")
     const geometry = featureData.geometry as ArcGisPoint;
     geojsonGeom = {
       type: "Point",
@@ -184,6 +190,7 @@ function getEsriFeature(
   }
 
   if (geojsonGeom) {
+    console.log("esriGeometryPoint")
     return {
       type: "Feature" as "Feature",
       properties: isJsonObject(featureData.attributes)
@@ -196,6 +203,7 @@ function getEsriFeature(
 
 function findHolesInRing(ring: Position[], holes: Position[][]) {
   // Return all holes where every vertex in the hole ring is inside the outer ring.
+  console.log("spatialring");
   return holes.filter((hole) =>
     hole.every((coordinates) => pointInPolygon(coordinates, ring))
   );
@@ -205,7 +213,7 @@ function esriSpatialReferenceToCrs(
   spatialReference: SpatialReference | undefined
 ): GeoJsonCrs | undefined {
   let code: number | string | undefined;
-
+  console.log("spatial");
   if (spatialReference) {
     if ("wkt" in spatialReference && spatialReference.wkt) {
       code = spatialReference.wkt;
diff --git a/node_modules/terriajs/lib/ModelMixins/FeatureInfoUrlTemplateMixin.ts b/node_modules/terriajs/lib/ModelMixins/FeatureInfoUrlTemplateMixin.ts
index 4206593..81b18ad 100644
--- a/node_modules/terriajs/lib/ModelMixins/FeatureInfoUrlTemplateMixin.ts
+++ b/node_modules/terriajs/lib/ModelMixins/FeatureInfoUrlTemplateMixin.ts
@@ -45,6 +45,7 @@ function FeatureInfoUrlTemplateMixin<T extends Constructor<Target>>(Base: T) {
         screenPosition,
         pickResult
       );
+      console.log("mixin")
       if (isDefined(feature)) {
         feature._catalogItem = this;
 
@@ -96,6 +97,7 @@ function FeatureInfoUrlTemplateMixin<T extends Constructor<Target>>(Base: T) {
     }
 
     wrapImageryPickFeatures<T extends ImageryProvider>(imageryProvider: T) {
+      console.log("mixin")
       const realPickFeatures = imageryProvider.pickFeatures;
       const catalogItem = this;
       imageryProvider.pickFeatures = async (
diff --git a/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts b/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts
index 5c557f5..4992781 100644
--- a/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts
+++ b/node_modules/terriajs/lib/ModelMixins/GeojsonMixin.ts
@@ -405,6 +405,7 @@ function GeoJsonMixin<T extends Constructor<Model<GeoJsonTraits>>>(Base: T) {
       _screenPosition: Cartesian2 | undefined,
       pickResult: any
     ): TerriaFeature | undefined {
+      console.log("build feature")
       if (pickResult instanceof Entity) {
         return TerriaFeature.fromEntityCollectionOrEntity(pickResult);
       } else if (isDefined(pickResult?.id)) {
@@ -936,7 +937,6 @@ function GeoJsonMixin<T extends Constructor<Model<GeoJsonTraits>>>(Base: T) {
         colString: string | undefined,
         defaultColor: Color
       ) => (colString ? getColor(colString) : defaultColor);
-
       const options = {
         describe: describeWithoutUnderscores,
         markerSize:
@@ -1051,9 +1051,15 @@ function GeoJsonMixin<T extends Constructor<Model<GeoJsonTraits>>>(Base: T) {
         }
 
         // Billboard
-        if (isDefined(entity.billboard) && isDefined(styles.markerUrl)) {
+        // RENCI changes here (08-02-2023): lines 1055 and 1061 replaced
+        //if (isDefined(entity.billboard) && isDefined(styles.markerUrl)) {
+        if (isDefined(entity.billboard) && 
+            (!properties ||
+             !isDefined(properties["marker-url"])) ||
+             !isDefined(styles.markerUrl)) {
           entity.billboard = new BillboardGraphics({
-            image: new ConstantProperty(styles.markerUrl),
+            //image: new ConstantProperty(styles.markerUrl),
+            image: new ConstantProperty(properties?.["marker-url"]?.getValue() ?? styles.markerUrl),
             width:
               properties && properties["marker-width"]
                 ? new ConstantProperty(properties["marker-width"])
diff --git a/node_modules/terriajs/lib/ModelMixins/MappableMixin.ts b/node_modules/terriajs/lib/ModelMixins/MappableMixin.ts
index 8ad0596..2bb96a1 100644
--- a/node_modules/terriajs/lib/ModelMixins/MappableMixin.ts
+++ b/node_modules/terriajs/lib/ModelMixins/MappableMixin.ts
@@ -53,10 +53,12 @@ export function isCesium3DTileset(
 export function isTerrainProvider(
   mapItem: MapItem
 ): mapItem is TerrainProvider {
+  console.log("imagery");
   return "hasVertexNormals" in mapItem;
 }
 
 export function isDataSource(object: MapItem): object is DataSource {
+  console.log("imagery");
   return "entities" in object;
 }
 
diff --git a/node_modules/terriajs/lib/Models/Cesium.ts b/node_modules/terriajs/lib/Models/Cesium.ts
index 87b0d69..588b6b5 100644
--- a/node_modules/terriajs/lib/Models/Cesium.ts
+++ b/node_modules/terriajs/lib/Models/Cesium.ts
@@ -287,6 +287,7 @@ export default class Cesium extends GlobeOrMap {
 
     // Handle left click by picking objects from the map.
     inputHandler.setInputAction((e) => {
+      console.log("Handle left click")
       if (!this.isFeaturePickingPaused)
         this.pickFromScreenPosition(e.position, false);
     }, ScreenSpaceEventType.LEFT_CLICK);
diff --git a/node_modules/terriajs/lib/Models/Leaflet.ts b/node_modules/terriajs/lib/Models/Leaflet.ts
index d8f0f0b..b20cce2 100644
--- a/node_modules/terriajs/lib/Models/Leaflet.ts
+++ b/node_modules/terriajs/lib/Models/Leaflet.ts
@@ -204,6 +204,7 @@ export default class Leaflet extends GlobeOrMap {
       ]);
       const pickLocation = this.pickLocation.bind(this);
       const pickFeature = (entity: Entity, event: L.LeafletMouseEvent) => {
+        console.log("pickfeature")
         this._featurePicked(entity, event);
       };
 
@@ -217,14 +218,17 @@ export default class Leaflet extends GlobeOrMap {
       });
 
       if (this.terriaViewer.disableInteraction) {
+        console.log("click 1")
         interactions.forEach((handler) => handler.disable());
         this.map.off("click", pickLocation);
         this.scene.featureClicked.removeEventListener(pickFeature);
         this._disposeSelectedFeatureSubscription &&
           this._disposeSelectedFeatureSubscription();
       } else {
+        console.log("click 2")
         interactions.forEach((handler) => handler.enable());
         this.map.on("click", pickLocation);
+        console.log(this.scene)
         this.scene.featureClicked.addEventListener(pickFeature);
         this._disposeSelectedFeatureSubscription = autorun(() => {
           const feature = this.terria.selectedFeature;
@@ -289,7 +293,7 @@ export default class Leaflet extends GlobeOrMap {
    */
   private pickLocation(e: L.LeafletEvent) {
     const mouseEvent = <L.LeafletMouseEvent>e;
-
+console.log(mouseEvent.latlng)
     // Handle click events that cross the anti-meridian
     if (mouseEvent.latlng.lng > 180 || mouseEvent.latlng.lng < -180) {
       mouseEvent.latlng = mouseEvent.latlng.wrap();
@@ -580,6 +584,7 @@ export default class Leaflet extends GlobeOrMap {
 
   @action
   private _featurePicked(entity: Entity, event: L.LeafletMouseEvent) {
+    console.log("featurepicked")
     this._pickFeatures(event.latlng);
 
     // Ignore clicks on the feature highlight.
@@ -632,6 +637,7 @@ export default class Leaflet extends GlobeOrMap {
     existingFeatures?: TerriaFeature[],
     ignoreSplitter: boolean = false
   ) {
+    console.log("picked")
     if (isDefined(this._pickedFeatures)) {
       // Picking is already in progress.
       return;
@@ -673,6 +679,7 @@ export default class Leaflet extends GlobeOrMap {
     const imageryLayers: ImageryProviderLeafletTileLayer[] = [];
     if (this.terria.allowFeatureInfoRequests) {
       this.map.eachLayer((layer) => {
+        console.log(layer)
         if (isImageryLayer(layer)) {
           imageryLayers.push(layer);
         }
diff --git a/node_modules/terriajs/lib/Models/LocationMarkerUtils.ts b/node_modules/terriajs/lib/Models/LocationMarkerUtils.ts
index 1286781..b37e3f8 100644
--- a/node_modules/terriajs/lib/Models/LocationMarkerUtils.ts
+++ b/node_modules/terriajs/lib/Models/LocationMarkerUtils.ts
@@ -102,6 +102,7 @@ export function getMarkerLocation(terria: Terria): LatLonHeight | undefined {
   }
   const marker: any = catalogItem.czmlData[1];
   const position = marker?.position?.cartographicDegrees;
+  console.log(position)
   if (Array.isArray(toJS(position))) {
     const [longitude, latitude, height] = position;
     if (longitude !== undefined && latitude !== undefined) {
diff --git a/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx b/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx
index f33bf94..cbbf320 100644
--- a/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx
+++ b/node_modules/terriajs/lib/ReactViews/Custom/Chart/ChartExpandAndDownloadButtons.tsx
@@ -11,6 +11,7 @@ import Terria from "../../../Models/Terria";
 import Icon from "../../../Styled/Icon";
 import UrlTraits from "../../../Traits/TraitsClasses/UrlTraits";
 import Styles from "./chart-expand-and-download-buttons.scss";
+// import {useLayout} from "../../../../../../lib/custom-ui/components/layout"
 
 const Dropdown = require("../../Generic/Dropdown");
 
@@ -70,6 +71,14 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
         terria.addModel(itemToExpand);
       } catch {}
       (await workbench.add(itemToExpand)).raiseError(terria, undefined, true);
+      
+      workbench.items.map((layer) => {
+        if (layer.chartItems.length > 0) {
+          layer.chartItems.map((item) => {
+            item.updateIsSelectedInWorkbench(true);
+          });
+        }
+      });
     });
   }
 
@@ -109,6 +118,7 @@ class ChartExpandAndDownloadButtons extends React.Component<PropsType> {
     const { sourceNames, canDownload, raiseToTitle, t } = this.props;
     if (sourceNames && sourceNames.length > 0) {
       const downloadNames = this.props.downloadNames || sourceNames;
+
       return (
         <ExpandAndDownloadDropdowns
           sourceNames={sourceNames}
@@ -185,6 +195,12 @@ const ExpandAndDownloadButtons = function (props: {
   downloadUrl?: string;
   t: TFunction;
 }) {
+  // const { drawerIsOpen, openDrawer } = useLayout();
+  props.onExpand()
+  
+  // if (drawerIsOpen) {
+  //   openDrawer()
+  // }
   return (
     <div className={Styles.chartExpand}>
       <button
diff --git a/node_modules/terriajs/lib/ReactViews/FeatureInfo/FeatureInfoPanel.tsx b/node_modules/terriajs/lib/ReactViews/FeatureInfo/FeatureInfoPanel.tsx
index f0e80f3..1263bc6 100644
--- a/node_modules/terriajs/lib/ReactViews/FeatureInfo/FeatureInfoPanel.tsx
+++ b/node_modules/terriajs/lib/ReactViews/FeatureInfo/FeatureInfoPanel.tsx
@@ -46,6 +46,7 @@ class FeatureInfoPanel extends React.Component<Props> {
   componentDidMount() {
     const { t } = this.props;
     const terria = this.props.viewState.terria;
+    console.log("featurein")
 
     disposeOnUnmount(
       this,
@@ -188,7 +189,9 @@ class FeatureInfoPanel extends React.Component<Props> {
   }
 
   pinClicked(longitude: number, latitude: number) {
+    console.log("pin clicked")
     if (!isMarkerVisible(this.props.viewState.terria)) {
+      console.log("marker")
       this.addManualMarker(longitude, latitude);
     } else {
       removeMarker(this.props.viewState.terria);
diff --git a/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx b/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx
index 025fd72..8cd3835 100644
--- a/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx
+++ b/node_modules/terriajs/lib/ReactViews/Workbench/Controls/ChartItemSelector.tsx
@@ -30,6 +30,7 @@ export const ChartItem: React.FC<IChartItem> = observer(
 
     const toggleActive = () => {
       const catalogItem = chartItem.item;
+      console.log(chartItem.item)
       runInAction(() => {
         const shouldSelect = !chartItem.isSelectedInWorkbench;
         chartItem.updateIsSelectedInWorkbench(shouldSelect);
